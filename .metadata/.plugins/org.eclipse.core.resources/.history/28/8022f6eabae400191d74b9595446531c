package com.tienda.retail.controllers;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.bhaiti.kela.beans.Student;
import com.bhaiti.kela.beans.StudentRegistration;
import com.bhaiti.kela.beans.StudentRegistrationReply;
import com.bhaiti.kela.repository.UserRepository;
import com.bhaiti.kela.service.RegistraUsuariosService;
import com.staxrt.tutorial.exception.ResourceNotFoundException;
import com.tienda.retail.model.ProductosDetalle;


@RestController
@RequestMapping("/api/v1")

public class ProductRegistrationController {
	
	  @Autowired
	  private RegistraUsuariosService registraUsuariosService;
	  private UserRepository userRepository;
	
	  /**
	   * Get all users list.
	   *
	   * @return the list
	   */
	  @RequestMapping(method = RequestMethod.GET, value="/users")
	  @ResponseBody
	  public List<ProductosDetalle> getAllUsers() {
	    //return registraUsuariosService.getTodos();
		 return  registraUsuariosService.allUsers();
	  }

	  /**
	   * Gets users by id.
	   *
	   * @param userId the user id
	   * @return the users by id
	   * @throws ResourceNotFoundException the resource not found exception
	   */
	  @GetMapping("/users/{id}")
	  public ResponseEntity<ProductosDetalle> getUsersById(@PathVariable(value = "id") Long userId)
	      throws ResourceNotFoundException {
	    ProductosDetalle user =
	        userRepository
	            .findById(userId)
	            .orElseThrow(() -> new ResourceNotFoundException("User not found on :: " + userId));
	    return ResponseEntity.ok().body(user);
	  }
	
}