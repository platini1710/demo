package com.bhaiti.kela.controllers;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.bhaiti.kela.beans.*;
import com.staxrt.tutorial.exception.ResourceNotFoundException;
import com.staxrt.tutorial.model.User;
import com.staxrt.tutorial.repository.UserRepository;


@RestController
@RequestMapping("/api/v1")

public class StudentRegistrationController {
	
	  @Autowired
	  private UserRepository userRepository;
	
	  /**
	   * Get all users list.
	   *
	   * @return the list
	   */
	  @RequestMapping(method = RequestMethod.GET, value="/users")
	  @ResponseBody
	  public List<User> getAllUsers() {
	    return userRepository.findAll();
	  }

	  /**
	   * Gets users by id.
	   *
	   * @param userId the user id
	   * @return the users by id
	   * @throws ResourceNotFoundException the resource not found exception
	   */
	  @GetMapping("/users/{id}")
	  public ResponseEntity<User> getUsersById(@PathVariable(value = "id") Long userId)
	      throws ResourceNotFoundException {
	    User user =
	        userRepository
	            .findById(userId)
	            .orElseThrow(() -> new ResourceNotFoundException("User not found on :: " + userId));
	    return ResponseEntity.ok().body(user);
	  }
	  

	  /**
	   * Delete user map.
	   *
	   * @param userId the user id
	   * @return the map
	   * @throws Exception the exception
	   */
	  @DeleteMapping("/userDelete/{id}")
	  public Map<String, String> deleteUser(@PathVariable(value = "id") Long userId) throws Exception {
	    User user =
	        userRepository
	            .findById(userId)
	            .orElseThrow(() -> 	    response.put("deleted", "no encontrado"));

	    userRepository.delete(user);
	    Map<String, String> response = new HashMap<>();
	    response.put("deleted", "borrado");
	    return response;
	  }
	
	  

	  /**
	   * Update user response entity.
	   *
	   * @param userId the user id
	   * @param userDetails the user details
	   * @return the response entity
	   * @throws ResourceNotFoundException the resource not found exception
	   */
	  @PutMapping("/users2/{id}")
	  public ResponseEntity<User> updateUser(
	      @PathVariable(value = "id") Long userId, @Valid @RequestBody User userDetails)
	      throws ResourceNotFoundException {

	    User user =
	        userRepository
	            .findById(userId)
	            .orElseThrow(() -> new ResourceNotFoundException("User not found on :: " + userId));


	    user.setLastName(userDetails.getLastName());
	    user.setFirstName(userDetails.getFirstName());

	    final User updatedUser = userRepository.save(user);
	    return ResponseEntity.ok(updatedUser);
	  }
	  /**
	   * Create user user.
	   *
	   * @param user the user
	   * @return the user
	   */
	  @PostMapping("/users")
	  public User createUser(@Valid @RequestBody User user) {
		  System.out.println("In registerStudent");
	    return userRepository.save(user);

	  }
  @RequestMapping(method = RequestMethod.POST, value="/register/student")
  @ResponseBody
  public StudentRegistrationReply registerStudent(@RequestBody Student student) {
  System.out.println("In registerStudent");
        StudentRegistrationReply stdregreply = new StudentRegistrationReply();           
        StudentRegistration.getInstance().add(student);
        //We are setting the below value just to reply a message back to the caller
        stdregreply.setName(student.getName());
        stdregreply.setAge(student.getAge());
        stdregreply.setRegistrationNumber(student.getRegistrationNumber());
        stdregreply.setRegistrationStatus("Successful");
        return stdregreply;
}
}